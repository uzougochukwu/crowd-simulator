maybe the set_pixel memory address calculator is multiplying the equation by the x coord or the y coord, so we end up with a memory address of 0

perhaps there is a command that compares the coordinate with zero and then skips

perhaps it is caused by the fact that we are in a loop that runs 100 times and adds one to x0 and x1, causing it to exceed the boundary of y1

the rectangle produced is very slim

we loop through memory address and there are many addresses that correspond to one pixel coord

it could just be the fact that 0,0 is the lowest row on the screen, so when we try to move off the screen at the lowest row, we are no longer within framebuffer memory.

and since the program memory break is set at the maximum of framebuffer memory, we are trespassing into memory that our program doesn't own, if we move to the right of the screen on row 0.

by the same token, if we started at the top row (which might be row 1080) and go to the left off screen, we would also segfault


